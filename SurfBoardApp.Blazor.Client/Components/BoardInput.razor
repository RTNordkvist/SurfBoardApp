@using SurfBoardApp.Blazor.Client.Service;
@using SurfBoardApp.Blazor.Shared.ViewModels.BoardViewModels;
@using System.Text.Json;
@inject ApiService apiService


<div class="modal-header" style="display: block;">
    <div class="row">
        <div class="col-12">
            <h3>
                <input type="text" @bind="Model.Name" class="modal-title input-edit" placeholder="Enter name..." />
            </h3>
        </div>
    </div>
</div>
<div class="modal-body">

    <div class="row pb-2">
        <dl class="row">
            <dt class="col-sm-2 row-cols-1">Length</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Length" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Width</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Width" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Thickness</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Thickness" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Volume</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Volume" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Type</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Type" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Price" class="input-edit" placeholder="Enter value..." />
            </dd>
            <dt class="col-sm-2">Equipment</dt>
            <dd class="col-sm-10">
                <input type="text" @bind="Model.Equipment" class="input-edit" placeholder="Enter value..." />
            </dd>
        </dl>
    </div>

    <div class="d-inline-flex">
        @if (Model.Images != null)
        {
            @foreach (var image in Model.Images)
            {
                <div>
                    <div>
                        <img src="@image.Picture" style="max-width:250px; max-height:250px" />
                    </div>
                    <div class="text-center">
                        <button type="button" class="btn btn-link text-danger btn-sm" @onclick="OnClosed">Remove</button>
                    </div>
                </div>
            }
        }
    </div>
</div>

<div class="modal-footer">
    <button class="mr-auto btn btn-outline-danger">Delete</button>
    <button class="btn btn-primary" @onclick="HandleSave">Save and close</button>
    <button type="button" class="btn btn-outline-secondary" @onclick="OnClosed">Cancel</button>
</div>

@code {
    [Parameter]
    public BoardVM? Model { get; set; }

    private string _modelJson;

    [Parameter]
    public EventCallback OnClosed { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Model != null)
        {
            _modelJson = JsonSerializer.Serialize(Model);
        }
    }

    private async Task HandleSave()
    {
        // Check if the model has been changed at all
        if (JsonSerializer.Serialize(Model) == _modelJson)
        {
            await OnClosed.InvokeAsync();
            return;
        }

        await OnClosed.InvokeAsync();

        var model = new EditBoardVM
            {
                Id = Model.Id,
                Name = Model.Name,
                Width = Model.Width,
                Thickness = Model.Thickness,
                Volume = Model.Volume,
                Type = Model.Type,
                Price = Model.Price == null ? 0 : (decimal)Model.Price,
                Equipment = Model.Equipment,
                MembersOnly = Model.MembersOnly
            };

        //await ApiService.Edit(model);
    }
}


