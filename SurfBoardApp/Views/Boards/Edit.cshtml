<!-- Importing the BoardViewModels namespace and setting the EditBoardVM model as the view's model -->
@using SurfBoardApp.Blazor.Shared.ViewModels.BoardViewModels;
@model EditBoardVM

<!-- Setting the view's title -->
@{
    ViewData["Title"] = "Edit";
}

<!-- Main content -->
<h1>Edit</h1>

<h4>Board</h4>
<hr />
<div class="row">
    <div class="col-md-8">

        <!-- Board edit form -->
        <form asp-action="Edit" enctype="multipart/form-data">

            <!-- Displaying validation errors -->
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Hidden input fields -->
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="ExistingImages" />
            <input type="hidden" asp-for="Version" />
            <input type="hidden" asp-for="ConfirmedOverwrite" value="false"/>

            <!-- Board details input fields -->
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Length" class="control-label"></label>
                <input asp-for="Length" class="form-control" value="@(Model.Length.HasValue ? Model.Length.Value.ToString().Replace(",", ".") : null)" />
                <span asp-validation-for="Length" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Width" class="control-label"></label>
                <input asp-for="Width" class="form-control" value="@(Model.Width.HasValue ? Model.Width.Value.ToString().Replace(",", ".") : null)" />
                <span asp-validation-for="Width" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Thickness" class="control-label"></label>
                <input asp-for="Thickness" class="form-control" value="@(Model.Thickness.HasValue ? Model.Thickness.Value.ToString().Replace(",", ".") : null)" />
                <span asp-validation-for="Thickness" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Volume" class="control-label"></label>
                <input asp-for="Volume" class="form-control" value="@(Model.Volume.HasValue ? Model.Volume.Value.ToString().Replace(",", ".") : null)" />
                <span asp-validation-for="Volume" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <input asp-for="Type" class="form-control" />
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" value="@(Model.Price.ToString().Replace(",", "."))" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Equipment" class="control-label"></label>
                <input asp-for="Equipment" class="form-control" />
                <span asp-validation-for="Equipment" class="text-danger"></span>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" asp-for="MembersOnly">
                <label class="form-check-label">
                    Members only
                </label>
            </div>

            <!-- Image upload -->
            <br />
            <div>
                <label for="newimages">Add Images:</label>
                <input type="file" asp-for="Images" accept=".jpg, .jpeg, .png" multiple>
            </div>
            <br />
            <br />

            <!-- Save and cancel buttons -->
            <br />
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a asp-action="Index" class="btn btn-secondary ">Back to List</a>
            </div>
        </form>
    </div>
    <!-- Display images if there are any -->
    @if (Model.ExistingImages != null && Model.ExistingImages.Any())
    {
        <h1>Images</h1>
        <div class="col-md-12">
            <div class="row">
                <!-- Loop through each image and display it -->
                @foreach (var image in Model.ExistingImages)
                {
                    <div class="col-md-4 text-center mb-3">
                        <div class="border">
                            <img src="@image.Picture" alt="Board Image" class="img-fluid edit-board-image">
                        </div>
                        <!-- Form to remove the image from the database -->
                        <form asp-action="RemoveImage" method="post" onclick="return confirm('Are you sure you want to delete this image?')">
                            <input type="hidden" name="boardId" value="@Model.Id" />
                            <input type="hidden" name="imageId" value="@image.Id" />
                            <button class="btn btn-danger mt-2" type="submit">Remove Image</button>
                        </form>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Include validation scripts -->
@section Scripts {
    @{
        // This section is used to render any scripts that are required for this view.
        // Here, we are rendering a partial view called "_ValidationScriptsPartial",
        // which contains the necessary scripts for client-side validation.
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }

